package main

import (
	l4g "github.com/alecthomas/log4go"
	. "gw.com.cn/dzhyun/app.frame.git"
	//ex "gw.com.cn/dzhyun/dzhexchange"
	"gw.com.cn/dzhyun/utils.git"
	"os"
	"os/signal"
	"runtime"
	"sync"
	"syscall"
	"time"
)

var MatchMarkets []string

//保证系统仅初始化一次
var once sync.Once

func main() {
	once.Do(initApp)
}

//初始化
func initApp() {
	runtime.GOMAXPROCS(GOMAXPROCS)
	LaxFlag := utils.NewLaxFlagDefault()
	var appcfgfile = LaxFlag.String("lf", "log4go.xml", "app cfgfile")
	LaxFlag.LaxParseDefault()
	l4g.LoadConfiguration(*appcfgfile)

	//业务处理程序
	customer := ex.NewCustomPuber()
	matchPool := ex.NewMatchPool()
	MatchMarkets = make([]string, 2)
	MatchMarkets[0] = "SH"
	MatchMarkets[1] = "SZ"
	for _, v := range MatchMarkets {
		matchPool.BindMarketMatchQueue(v)
	}
	codesArr := ex.LoadData()
	//根据商品代码创建队列
	for i := 0; i < len(codesArr); i++ {
		stkList := new(ex.StkMatchList)
		stkList.InitList()
		cb := ex.MarketQuoteMap[codesArr[i]]
		matchPool.GetMatchQueueByMarket(cb.MarketCode)[codesArr[i]] = stkList
	}
	l4g.Info("撮合池市场大小: %d", len(matchPool.GetAllMatchQueue()))
	ex.Mh = ex.NewMatchHandler()
	//撮合srv
	stms := new(ex.StkMatchService)
	ex.Mh.Init(matchPool, stms)
	ex.Rh = ex.NewReqHandler()
	ex.Rh.SetMatchHandler(ex.Mh)
	customer.SetRequestHandler(ex.Rh)
	customer.Dqu.RecoveryQuoteFromDB()
	ex.CustomerAction = customer
	time.Sleep(time.Second / 10)

	//初始化app
	myapp := ex.NewExchangeApp()
	//初始化应用框架（任务调度，初始化app conf等）
	workmain := NewWorkMain()
	defer func() {
		workmain.Stop()
	}()
	app := NewAppMain(myapp)
	ex.App = app

	app.SetCustom(customer)
	//启动应用框架
	workmain.Start(app)
	storeaddress, _ := ex.App.(*AppMain).GetStoreAddr()
	//初始化存储
	storesvc := ex.NewStorageSvc()
	storesvc.InitStore(storeaddress, "", "")
	ex.AppStore = storesvc

	//等待退出
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, os.Kill, syscall.SIGTERM)
	<-c
	l4g.Info("Receive ctrl-c")
}

/**
 *初始化码表
 *初始化每个市场每个品种的撮合队列
 *初始化市场所属的撮合池
 *加载历史行情 等待行情触发再次撮合
 *订阅行情
 *开启订阅发布任务
 *监听事件（下单撤单推送等）
 *绑定端口
 */
func initCoreSys() {
}
